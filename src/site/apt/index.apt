~~
~~ Copyright 2006 FatWire Corporation. All Rights Reserved.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~    http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

Introduction

  This project is a collection of various servlet filters and listeners that help collecting information about runtime performance of your ContentServer installation.
  Some of the tools put information in the log file, other make them available through JMX beans. 

* JMX 
 
  How to enable JMX is explained {{{http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html}here}}. 
  In most case it is enough to add four system properties to the startup command: 
  <<<-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=51115 -Dcom.sun.management.jmxremote.authenticate=false
  -Dcom.sun.management.jmxremote.ssl=false>>>.  There is no port for JMX reserved by IANA. 
  When jconsole does not want to connect to a remote server because the RMI server does not bind to the correct ip address, it might help to add <<<-Djava.rmi.server.hostname=your_server_ip>>>
  to the startup line. 

  <<Please read and understand the security warning at the JMX enablement page linked above>>. The options provied above are not secure. They are provided to get you started.
  
  JMX has several features, for instance that the beans are queryable and can be found in a single repository. It is easy to write a jsp that 
  displays information on one or more JMX beans.
  
  With {{{http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html}JConsole}} or {{{http://java.sun.com/javase/6/docs/technotes/tools/share/jvisualvm.html}jvisualvm with jmx beans extension}} beans can also be inspected remotely.
  
  Another big advantage that several monitoring applications have JMX support, like {{{http://www.cacti.net/}cacti}} or {{{http://www.hyperic.com/}hyperic}}. 
  
* Logging Tip

  To split the output of serveral loggers into different file so they can be analyzed easier you can configure Log4J with different appenders per logger. 
  Please check the Log4J documentation on how to set that up. The SupportTools also have a section on how to configure Log4J for ContentServer.  
  
Deployment

  All of these tools are deployed through the web application. This means that changes need to be made to the web.xml file. 
  Per tool I have added the instructions. 
  On most cases you can just copy/past them into the correct location in the web.xml file and then restart the application server. 
    
  All of the tools can be downloaded as {{{http://www.nl.fatwire.com/maven2/com/fatwire/gst/gst-webapp-profiling/ }packaged in a single jar file}}.
  
  
Status servlet filter
  
  ContentServer has no api to set http response status. Many customers believe that this is a severe limitation and 
  this filter works around this limitation. 
  It allows (outer) <<xml elements>> to set the http response status. 
  Technically you can set the special header from any called xml element, as long as no jsp element has been called yet.  
  

  The header that needs to be set by the xml element is "X-Fatwire-Status". The most useful use cases are for status <<<404>>> and <<<302>>>. 
  For the <<<302>>> status also the 'Location' header needs to be specified.
  Sample code would be \<ICS.STREAMHEADER NAME="X-Fatwire-Status" VALUE="404"/\>. 
  In this case Satellite server will set the http response code to 404.  

  Another header that is handled by this filter is "X-Fatwire-Header". The use case for this header is limited, as normal http headers can be set with ics.StreamHeader() or \<ICS.STREAMHEADER NAME="Header Name" VALUE="Header Value"/\>. Sample code for this header: \<ICS.STREAMHEADER NAME="X-Fatwire-Header" VALUE="foo|bar"/\>. 
  At Satellite server the header foo with value bar will be set. 
  
  <<Warning>>: the implementation uses response.setStatus() and not response.sendError(). This might have implications for the invoking of error handlers defined in the web.xml. 

  
-------
  <filter>
    <filter-name>CustomHeaderFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.httpstatus.CustomHeaderFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>CustomHeaderFilter</filter-name>
    <url-pattern>/Satellite/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
---------
 
  
  
Response time profilters
  
  Five different variants to profile for response times. Each with their benefit:
  
    * TimerFilter: simplest
    
    * LoggerFilter: add sessionid to TimerFilter
    
    * ResponseTimeFilter: adds nesting for further granularity. More usefull at ContentServer than at Satellite servlet.
    
    * ResponseTimeRequestListener: provides statistical information, accessable via JMX
    
    * TimeDebugListener: parse in real time the contentserver time.debug message and makes statistics available via JMX.

  	[]
* TimerFilter
  
  Prints <<<elapsed ms for url>>> to the standard log for logger <<<com.fatwire.gst.web.servlet.profiling.servlet.filter.TimerFilter>>> at DEBUG level.

-------
  <filter>
    <filter-name>TimerFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.TimerFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>TimerFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
---------
  
  Output is like this:
  
------
[2010-06-02 14:04:23.144][com.fatwire.gst.web.servlet.profiling.servlet.filter.TimerFilter][DEBUG] 5 ms for GET|/cs/ContentServer?pagename=OpenMarket%2FXcelerate%2FSearch%2FEvent
------  
  


* LoggerFilter
  
  Prints to the log <<<com.fatwire.gst.web.servlet.profiling.servlet.filter.LoggerFilter>>> with INFO level: <<<sessionid | url in elapsed ms>>>.
  Very usefull to take requests that take a long time, as well as to group requests based on session id.
  
--------
  <filter>
    <filter-name>LoggerFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.LoggerFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>LoggerFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
---------
  
  Output:

--------
[2010-06-02 14:04:23.144][com.fatwire.gst.web.servlet.profiling.servlet.filter.LoggerFilter][INFO] B1076A3824CE4FA84DCA5FAA9C90035E|GET|/cs/ContentServer?pagename=OpenMarket%2FXcelerate%2FSearch%2FEvent in 5 ms
---------
  
  
* ResponseTimeFilter
  
  This is a filter that measures and logs servlet execution times and takes care of nesting.
  This means that if one servlet (ContentServer) is calling another (a jsp element), each execution is logged seperately.
  
  The logging is done in a seperate thread to minimize runtime impact. Logfiles are stored in the web-app temp directory. The logs files are rolled each 1 million lines and on context startup.
  
  The log file is a tab seperated file with on each line: period, name, elapsed, level,counter.
  
  * period is an integer incremented each second since filter startup.
  
  * name is a dot seperated string with request.method.uri.pagename.jsp
  
  * elapsed is the execution time for this request in micro seconds.
  
  * level is the nesting level of this request
  
  * counter is an incremental counter for the outermost request, so sub requests can be grouped together.
  
  []
  
-------
  <filter>
    <filter-name>ResponseTimeFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.ResponseTimeFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>ResponseTimeFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
  </filter-mapping>
---------

  The filter takes a parameter called "specialParams". This is a semi-column seperated list of names that are used for addition to the name. Default values are "pagename" and "blobtable".
  
  Sample output
  
---------
period	name	elapsed	nesting	counter
208	request.GET./cs/ContentServer.pagename=OpenMarket/Xcelerate/Search/Event./cs/jsp/cs_deployed/OpenMarket/Xcelerate/Search/Event.jsp	2801	2	9
208	request.GET./cs/ContentServer.pagename=OpenMarket/Xcelerate/Search/Event	12581	1	9

703	request.GET./cs/ContentServer.pagename=OpenMarket/Xcelerate/Util/getCurrentUser./cs/jsp/cs_deployed/OpenMarket/Xcelerate/Util/getCurrentUser.jsp	27867	2	36
703	request.GET./cs/ContentServer.pagename=OpenMarket/Xcelerate/Util/getCurrentUser./cs/jsp/cs_deployed/OpenMarket/Xcelerate/Util/getCurrentUser.jsp	33973	2	35
703	request.GET./cs/ContentServer.pagename=OpenMarket/Xcelerate/Util/getCurrentUser./cs/jsp/cs_deployed/OpenMarket/Xcelerate/Util/getCurrentUser.jsp	30566	2	37
703	request.GET./cs/ContentServer.pagename=OpenMarket/Xcelerate/Util/getCurrentUser	95184	1	35
703	request.GET./cs/ContentServer.pagename=OpenMarket/Xcelerate/Util/getCurrentUser	64995	1	36
703	request.GET./cs/ContentServer.pagename=OpenMarket/Xcelerate/Util/getCurrentUser	58655	1	37
--------  
  
  Any line with value '1' in the nesting column is the outer request, if the nesting value is higher the request is included.
  
  The requests can be grouped by their 'counter' value. This is usefull to correlate concurrent requests, as seen by the getCurrentUser requests. 
   
* ResponseTimeRequestListener
  
  Adds averages for requests to JMX MBeans in the namespace <<<com.fatwire.gst.web.servlet:type=ResponseTimeStatistic>>>.
  
  The root bean (com.fatwire.gst.web.servlet:type=ResponseTimeStatistic) holds the statistics for all the requests. The 'child' beans do this at their most detail, there is no aggregation at the 'parent' level. For instance for 'com.fatwire.gst.web.servlet:type=ResponseTimeStatistic,path=/cs/ContentServer,pagename=OpenMarket/Xcelerate/Search/Event'
  the data is not aggregated at 'com.fatwire.gst.web.servlet:type=ResponseTimeStatistic,path=/cs/ContentServer'. That bean counts response times when no <pagename> parameter can be found on the request.  
  
---------
  <listener>
  	<listener-class>com.fatwire.gst.web.servlet.profiling.servlet.jmx.ResponseTimeRequestListener</listener-class>
  </listener>
--------
  
  Some screenshots:

  Overview of the total, this includes all the requests.
  
[images/jmx-response-time-total.png] Total
  
  Details of a servlet, in this case the CacheServer servlet.

[images/jmx-response-time-detail.png] Detail

  Details of the FSIIWrapper page

[images/jmx-response-time-fsiiwrapper.png] FSIIWrappper

  Details of the Advanced UI login page. 
  Details on page (pagenames) are only gathered at their detail level if the pagename parameter can be retrieved via request.getParameter(); 
  if it is a GET or a POST in a urlencoded form.

[images/jmx-response-time-login-page.png]

  Details of a BlobServer

[images/jmx-response-time-blobs.png]

  Details of a Dash jsp.

[images/jmx-response-time-dash.png]


  
  
* Time debug parser to JMX 
  
  The tools adds statistical information from ContentServer's time debug message to JMX beans. Log4J needs to be installed and configured for this to work. 
  The beans have names with the namespace <<<com.fatwire.gst.web.servlet:type=StatFromTimeDebug>>>.
  
--------
  <listener>
  	<listener-class>com.fatwire.gst.web.servlet.profiling.logger.TimeDebugListener</listener-class>
  </listener>
---------

  Some screenshots:
  
  Overview

[images/time-debug-overview.png] Overview for time debug

  Details for an element

[images/time-debug-element.png] details for an element
 
 Details for a page

[images/time-debug-page.png] 

  Details for sql select statements.
  
[images/time-debug-sql.png] 
  


~~experimental, not tested as a version that also works for out of the box logger. This is at this moment not complete, as the common-logging factory class needs to be written.
~~com.fatwire.gst.web.servlet.profiling.logger.ft.TraditionalInterceptor
  
  
CacheManager JMX tool
  
  This tools allows to inspect the status of the ContentServer resultset caches over JMX. 

----------  
  <listener>
  	<listener-class>com.fatwire.gst.web.servlet.profiling.jmx.JmxActivator</listener-class>
  </listener>
----------  
  
  and some screenshots:
  
  Overview
  
[images/jmx-overview.png]

  Detail of a ContentServer cache  

[images/jmx-caches.png]

  Detail of a ContentServer cache

[images/jmx-cache-detail.png]
  
  
Debug
  
* Simple debug for context start and stop
  
--------  
  <listener>
  	<listener-class>com.fatwire.gst.web.servlet.profiling.servlet.ContextLogger</listener-class>
  </listener>
--------  
  
* Simple debug for session logger

  com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger

-------  
  <listener>
  	<listener-class>com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger</listener-class>
  </listener>
--------  
  
  The output is:
  
---------
[2010-06-02 14:04:23.139][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionCreated: 'B1076A3824CE4FA84DCA5FAA9C90035E', lastAccessed: Wed Jun 02 14:04:23 CEST 2010, created:Wed Jun 02 14:04:23 CEST 2010, maxInactiveInterval: 1800
[2010-06-02 14:04:23.139][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionAttributeAdded: 'B1076A3824CE4FA84DCA5FAA9C90035E' distributionListener=MyHttpSessionActivationListener
[2010-06-02 14:04:23.141][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionAttributeAdded: 'B1076A3824CE4FA84DCA5FAA9C90035E' username=DefaultReader
[2010-06-02 14:04:23.141][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionAttributeAdded: 'B1076A3824CE4FA84DCA5FAA9C90035E' currentUser=2
[2010-06-02 14:04:23.141][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionAttributeAdded: 'B1076A3824CE4FA84DCA5FAA9C90035E' currentACL=Browser,Visitor
[2010-06-02 14:04:23.143][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionDestroyed: 'B1076A3824CE4FA84DCA5FAA9C90035E', lastAccessed: Wed Jun 02 14:04:23 CEST 2010, created:Wed Jun 02 14:04:23 CEST 2010, maxInactiveInterval: 900
[2010-06-02 14:04:23.143][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionAttributeRemoved: 'B1076A3824CE4FA84DCA5FAA9C90035E' username
[2010-06-02 14:04:23.143][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionAttributeRemoved: 'B1076A3824CE4FA84DCA5FAA9C90035E' currentACL
[2010-06-02 14:04:23.143][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionAttributeRemoved: 'B1076A3824CE4FA84DCA5FAA9C90035E' currentUser
[2010-06-02 14:04:23.143][com.fatwire.gst.web.servlet.profiling.servlet.SessionLogger][DEBUG] sessionAttributeRemoved: 'B1076A3824CE4FA84DCA5FAA9C90035E' distributionListener
----------  
  
  
Cache-Control response header tools

  These two tools add the Cache-Control http response header to responses. This is to help browser to cache the response. 
  There are other ways to solve this with more granularity; these two ways are sometimes easier to implement.

  * ExpiresFilter: simplest, just adds header based on filter url-pattern configuration. 

  * CacheControlFilter: more granular control 

  []
  
  These two filters are mutually exclusive; you should deploy only one variant.   

* ExpiresFilter

  Servlet Filter so set Cache-Control: max-age header. The extension based pattern in the example below add quickly browsing caching capabilities to static jpeg images.  

-------------
  <filter>
     <description>Set Cache-Control:max-age header </description>
     <filter-name>MaxAgeFilter</filter-name>
     <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.ExpiresFilter</filter-class>
     <init-param>
         <description>Set max-age period, accepts 's','m','h' and 'd' as postfix.</description>
         <param-name>period</param-name>
         <param-value>5d</param-value>
     </init-param>
  </filter>
  <filter-mapping>
     <filter-name>MaxAgeFilter</filter-name>
     <url-pattern>*.jpg</url-pattern>
     <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
------------
  
  
 * CacheControlFilter
  
  The configuration file at the 'uri' param if of the format
  
  <<<uri pattern=ttl in seconds>>>
  
  for instance
  <<</Satellite/FirstSite/.*=250>>>

-------
  <filter>
    <filter-name>CacheControlFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.CacheControlFilter</filter-class>
    <init-param>
      <param-name>uri</param-name>
      <param-value>file://./cache-control.conf</param-value> <!-- in URI syntax -->
    </init-param>
  </filter>
  
  <filter-mapping>
    <filter-name>CacheControlFilter</filter-name>
    <url-pattern>/Satellite/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
---------
    
  
  
Various  
  
* DropConnectionHeaderFilter

  Http servlet filter to drop the http response Connection header. 
  If the web-app would set this header inappropriately 
  this filter would help to let the servlet container manage the http connection.

--------  
  <filter>
     <filter-name>DropConnectionHeaderFilter</filter-name>
     <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.DropConnectionHeaderFilter</filter-class>
  </filter>
  <filter-mapping>
     <filter-name>DropConnectionHeaderFilter</filter-name>
     <url-pattern>/Satellite*</url-pattern>
     <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
--------  
  
  
* VersionListener
  
  Adds ContentServer version information to JMX beans under the name scope <<<com.fatwire.gst.web.servlet:type=Version>>>
 
---------  
  <listener>
  	<listener-class>com.fatwire.gst.web.servlet.profiling.version.VersionListener</listener-class>
  </listener>
-------  
  
  Here is a screenshot of the JMX information in jconsole:

[images/jmx-version.png]
  
Debug
  
  
* AccessLogFilter
  
  Prints detailed information to the log file on the http request as provided by the servlet container. Logger name is <<<com.fatwire.gst.web.servlet.profiling.servlet.filter.debug.AccessLogFilter>>>. 

  The columns printed are: <<<method	scheme	servername	serverport	requesturi	protocol	contextpath	servletpath	pathinfo	querystring	characterencoding	contentlength	contenttype	cookies	locale	remoteaddr	remotehost	remoteuser	requestedsessionid	sessionid	userprincipal>>>

-------
  <filter>
    <filter-name>AccessLogFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.debug.AccessLogFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>AccessLogFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
---------
  
  Ouput:

-------------
[2010-06-02 14:04:23.139][com.fatwire.gst.web.servlet.profiling.servlet.filter.debug.AccessLogFilter][INFO] GET	http	localhost	8180	/cs/ContentServer	HTTP/1.1	/cs	/ContentServer	null	pagename=OpenMarket%2FXcelerate%2FSearch%2FEvent	null	-1	null		en_US	127.0.0.1	127.0.0.1	null	null	B1076A3824CE4FA84DCA5FAA9C90035E		
------------  
  
* ContentServerDuplicateHeaderFilter
  
  Filters out some http response headers, when set by the servlet.
  
  config param: <<<black-list>>>; semi-colon seperated. Default values: 'date;server;content-length'. The 'black-list' values will be added to the default values.

-------
  <filter>
    <filter-name>ContentServerDuplicateHeaderFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.debug.ContentServerDuplicateHeaderFilter</filter-class>
    <!--
    <init-param>
      <param-name>black-list</param-name>
      <param-value>foo;foo1</param-value>
    </init-param>
    -->
  </filter>
  
  <filter-mapping>
    <filter-name>ContentServerDuplicateHeaderFilter</filter-name>
    <url-pattern>/Satellite/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
---------
  
  
  
* HeaderStackTraceFilter
  
  prints a stack trace to the log file each time the servlet sets a response header or a cookie.

-------
  <filter>
    <filter-name>HeaderStackTraceFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.debug.HeaderStackTraceFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>HeaderStackTraceFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
---------
  
  
* RequestDumperFilter
  
  Shameless copy from apache-tomcat. Prints a lot of information on the received request. The logger name is <<<com.fatwire.gst.web.servlet.profiling.servlet.filter.debug.RequestDumperFilter>>> and it logs at TRACE level.
  
-------
  <filter>
    <filter-name>RequestDumperFilter</filter-name>
    <filter-class>com.fatwire.gst.web.servlet.profiling.servlet.filter.debug.RequestDumperFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>RequestDumperFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
---------
  
  The output of this tool is:
  
----------
[2010-06-02 14:04:23.140][com.fatwire.gst.web.servlet.profiling.servlet.filter.debug.RequestDumperFilter][TRACE] Request Received at 2010-06-02 14:04:23.139
 characterEncoding=null
     contentLength=-1
       contentType=null
            locale=en_US
           locales=en_US
         parameter=pagename=OpenMarket/Xcelerate/Search/Event
          protocol=HTTP/1.1
        remoteAddr=127.0.0.1
        remoteHost=127.0.0.1
            scheme=http
        serverName=localhost
        serverPort=8180
          isSecure=false
 ---------------------------------------------
       contextPath=/cs
            header=user-agent=Java/1.6.0_20
            header=host=localhost:8180
            header=accept=text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
            header=connection=keep-alive
            method=GET
          pathInfo=null
       queryString=pagename=OpenMarket%2FXcelerate%2FSearch%2FEvent
        remoteUser=null
requestedSessionId=null
        requestURI=/cs/ContentServer
       servletPath=/ContentServer
=============================================
---------  
  
~~Highly Experimental:
  
~~* com.fatwire.gst.web.servlet.profiling.servlet.filter.SessionLessSatelliteFilter
  
~~  This is an attempt to makde the remote satellite server stateless.
  

